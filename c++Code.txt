// Example 1
#include <iostream>
using namespace std;

int main() {
    cout << "Welcome to C++ programming!" << endl;
    return 0;
}
// Output: Welcome to C++ programming!

// Example 2
#include <iostream>
using namespace std;

int main() {
    int num = 10;
    cout << "The number is " << num << "." << endl;
    return 0;
}
// Output: The number is 10.

// Example 3
#include <iostream>
using namespace std;

int main() {
    int a = 5;
    int b = 3;
    int sum = a + b;
    cout << "Sum: " << sum << endl;
    return 0;
}
// Output: Sum: 8

// Example 4
#include <iostream>
using namespace std;

int main() {
    int a = 10;
    int b = 4;
    int difference = a - b;
    cout << "Difference: " << difference << endl;
    return 0;
}
// Output: Difference: 6

// Example 5
#include <iostream>
using namespace std;

int main() {
    int a = 7;
    int b = 6;
    int product = a * b;
    cout << "Product: " << product << endl;
    return 0;
}
// Output: Product: 42

// Example 6
#include <iostream>
using namespace std;

int main() {
    int a = 20;
    int b = 5;
    int quotient = a / b;
    cout << "Quotient: " << quotient << endl;
    return 0;
}
// Output: Quotient: 4

// Example 7
#include <iostream>
using namespace std;

int main() {
    float a = 7.0;
    float b = 2.0;
    float quotient = a / b;
    cout << "Quotient: " << quotient << endl;
    return 0;
}
// Output: Quotient: 3.5

// Example 8
#include <iostream>
using namespace std;

int main() {
    char letter = 'A';
    cout << "The letter is " << letter << endl;
    return 0;
}
// Output: The letter is A

// Example 9
#include <iostream>
using namespace std;

int main() {
    string message = "Hello, World!";
    cout << message << endl;
    return 0;
}
// Output: Hello, World!

// Example 10
#include <iostream>
using namespace std;

int main() {
    string firstName = "John";
    string lastName = "Doe";
    string fullName = firstName + " " + lastName;
    cout << "Full Name: " << fullName << endl;
    return 0;
}
// Output: Full Name: John Doe

// Example 11
#include <iostream>
using namespace std;

int main() {
    cout << "Line 1" << endl;
    cout << "Line 2" << endl;
    cout << "Line 3" << endl;
    return 0;
}
// Output: 
// Line 1
// Line 2
// Line 3

// Example 12
#include <iostream>
using namespace std;

int main() {
    bool isProgrammingFun = true;
    cout << "Is programming fun? " << isProgrammingFun << endl;
    return 0;
}
// Output: Is programming fun? 1

// Example 13
#include <iostream>
using namespace std;

int main() {
    int x = 100;
    int y = 200;
    cout << "X: " << x << ", Y: " << y << endl;
    return 0;
}
// Output: X: 100, Y: 200

// Example 14
#include <iostream>
using namespace std;

int main() {
    float pi = 3.14;
    cout << "Value of pi: " << pi << endl;
    return 0;
}
// Output: Value of pi: 3.14

// Example 15
#include <iostream>
using namespace std;

int main() {
    double largeNumber = 123456789.987654321;
    cout << "Large number: " << largeNumber << endl;
    return 0;
}
// Output: Large number: 1.23457e+08

// Example 16
#include <iostream>
using namespace std;

int main() {
    char grade = 'A';
    cout << "Grade: " << grade << endl;
    return 0;
}
// Output: Grade: A

// Example 17
#include <iostream>
using namespace std;

int main() {
    double num1 = 5.5;
    double num2 = 2.2;
    double sum = num1 + num2;
    cout << "Sum: " << sum << endl;
    return 0;
}
// Output: Sum: 7.7

// Example 18
#include <iostream>
using namespace std;

class Student {
public:
    string name;
    int age;
};

int main() {
    Student s1;
    s1.name = "Alice";
    s1.age = 20;
    cout << "Student Name: " << s1.name << ", Age: " << s1.age << endl;
    return 0;
}
// Output: Student Name: Alice, Age: 20

// Example 19
#include <iostream>
using namespace std;

class Dog {
public:
    void bark() {
        cout << "Woof!" << endl;
    }
};

int main() {
    Dog myDog;
    myDog.bark();
    return 0;
}
// Output: Woof!

// Example 20
#include <iostream>
using namespace std;

int main() {
    cout << "First Line\nSecond Line\nThird Line" << endl;
    return 0;
}
// Output: 
// First Line
// Second Line
// Third Line
////////////////////////////////////////////////////////////////////////////
Comments : Syntax 

//this is a comment 
/* thi is a 
     comment */ 


///////////////////////////////////////////////











C++ variables: Syntax 
//////////////////////////////////////////





// Example 1: Declaring and Initializing an Integer Variable
#include <iostream>
using namespace std;

int main() {
    int age = 25;
    cout << "Age: " << age << endl;
    return 0;
}
// How to use C++ Variables

// Example 2: Declaring and Initializing a Float Variable
#include <iostream>
using namespace std;

int main() {
    float pi = 3.14;
    cout << "Value of pi: " << pi << endl;
    return 0;
}
// How to use C++ Variables

// Example 3: Declaring and Initializing a Double Variable
#include <iostream>
using namespace std;

int main() {
    double largeNumber = 123456789.987654321;
    cout << "Large number: " << largeNumber << endl;
    return 0;
}
// How to use C++ Variables

// Example 4: Declaring and Initializing a Char Variable
#include <iostream>
using namespace std;

int main() {
    char grade = 'A';
    cout << "Grade: " << grade << endl;
    return 0;
}
// How to use C++ Variables

// Example 5: Declaring and Initializing a String Variable
#include <iostream>
#include <string>
using namespace std;

int main() {
    string greeting = "Hello, World!";
    cout << greeting << endl;
    return 0;
}
// How to use C++ Variables

// Example 6: Using Multiple Variables
#include <iostream>
using namespace std;

int main() {
    int a = 5, b = 10;
    cout << "a: " << a << ", b: " << b << endl;
    return 0;
}
// How to use C++ Variables

// Example 7: Modifying a Variable
#include <iostream>
using namespace std;

int main() {
    int number = 10;
    number = 20;
    cout << "Modified number: " << number << endl;
    return 0;
}
// How to use C++ Variables

// Example 8: Adding Two Variables
#include <iostream>
using namespace std;

int main() {
    int x = 5;
    int y = 15;
    int sum = x + y;
    cout << "Sum: " << sum << endl;
    return 0;
}
// How to use C++ Variables

// Example 9: Subtracting Two Variables
#include <iostream>
using namespace std;

int main() {
    int x = 20;
    int y = 5;
    int difference = x - y;
    cout << "Difference: " << difference << endl;
    return 0;
}
// How to use C++ Variables

// Example 10: Multiplying Two Variables
#include <iostream>
using namespace std;

int main() {
    int a = 4;
    int b = 5;
    int product = a * b;
    cout << "Product: " << product << endl;
    return 0;
}
// How to use C++ Variables

// Example 11: Dividing Two Variables
#include <iostream>
using namespace std;

int main() {
    int dividend = 20;
    int divisor = 4;
    int quotient = dividend / divisor;
    cout << "Quotient: " << quotient << endl;
    return 0;
}
// How to use C++ Variables

// Example 12: Using Float Variables for Division
#include <iostream>
using namespace std;

int main() {
    float dividend = 7.0;
    float divisor = 2.0;
    float quotient = dividend / divisor;
    cout << "Quotient: " << quotient << endl;
    return 0;
}
// How to use C++ Variables

// Example 13: Using Double Variables for Precision
#include <iostream>
using namespace std;

int main() {
    double preciseValue = 3.141592653589793;
    cout << "Precise value of pi: " << preciseValue << endl;
    return 0;
}
// How to use C++ Variables

// Example 14: Combining String Variables
#include <iostream>
#include <string>
using namespace std;

int main() {
    string firstName = "John";
    string lastName = "Doe";
    string fullName = firstName + " " + lastName;
    cout << "Full Name: " << fullName << endl;
    return 0;
}
// How to use C++ Variables

// Example 15: Declaring Constants
#include <iostream>
using namespace std;

int main() {
    const int daysInWeek = 7;
    cout << "Days in a week: " << daysInWeek << endl;
    return 0;
}
// How to use C++ Variables

// Example 16: Using Boolean Variables
#include <iostream>
using namespace std;

int main() {
    bool isProgrammingFun = true;
    cout << "Is programming fun? " << isProgrammingFun << endl;
    return 0;
}
// How to use C++ Variables

// Example 17: Using Char Variables in Arithmetic
#include <iostream>
using namespace std;

int main() {
    char letter = 'A';
    char nextLetter = letter + 1;
    cout << "Next letter: " << nextLetter << endl;
    return 0;
}
// How to use C++ Variables

// Example 18: Using Sizeof to Determine Variable Size
#include <iostream>
using namespace std;

int main() {
    int intSize = sizeof(int);
    double doubleSize = sizeof(double);
    cout << "Size of int: " << intSize << " bytes" << endl;
    cout << "Size of double: " << doubleSize << " bytes" << endl;
    return 0;
}
// How to use C++ Variables

// Example 19: Initializing Multiple Variables in One Line
#include <iostream>
using namespace std;

int main() {
    int x = 5, y = 10, z = 15;
    cout << "x: " << x << ", y: " << y << ", z: " << z << endl;
    return 0;
}
// How to use C++ Variables

// Example 20: Using Variables in Expressions
#include <iostream>
using namespace std;

int main() {
    int a = 10;
    int b = 5;
    int result = (a + b) * (a - b);
    cout << "Result: " << result << endl;
    return 0;
}
// How to use C++ Variables













Input user :syntax

/////////////////////////////////////

// Example 1: Basic Integer Input
#include <iostream>
using namespace std;

int main() {
    int number;
    cout << "Enter an integer: ";
    cin >> number;
    cout << "You entered: " << number << endl;
    return 0;
}
// How to handle C++ User Input

// Example 2: Basic Float Input
#include <iostream>
using namespace std;

int main() {
    float number;
    cout << "Enter a float: ";
    cin >> number;
    cout << "You entered: " << number << endl;
    return 0;
}
// How to handle C++ User Input

// Example 3: Basic Double Input
#include <iostream>
using namespace std;

int main() {
    double number;
    cout << "Enter a double: ";
    cin >> number;
    cout << "You entered: " << number << endl;
    return 0;
}
// How to handle C++ User Input

// Example 4: Basic Character Input
#include <iostream>
using namespace std;

int main() {
    char character;
    cout << "Enter a character: ";
    cin >> character;
    cout << "You entered: " << character << endl;
    return 0;
}
// How to handle C++ User Input

// Example 5: Basic String Input
#include <iostream>
#include <string>
using namespace std;

int main() {
    string name;
    cout << "Enter your name: ";
    cin >> name;
    cout << "Hello, " << name << "!" << endl;
    return 0;
}
// How to handle C++ User Input

// Example 6: Input Multiple Values
#include <iostream>
using namespace std;

int main() {
    int a, b;
    cout << "Enter two integers: ";
    cin >> a >> b;
    cout << "You entered: " << a << " and " << b << endl;
    return 0;
}
// How to handle C++ User Input

// Example 7: Input String with Spaces
#include <iostream>
#include <string>
using namespace std;

int main() {
    string fullName;
    cout << "Enter your full name: ";
    getline(cin, fullName);
    cout << "Hello, " << fullName << "!" << endl;
    return 0;
}
// How to handle C++ User Input

// Example 8: Input Multiple Lines
#include <iostream>
#include <string>
using namespace std;

int main() {
    string line1, line2;
    cout << "Enter the first line: ";
    getline(cin, line1);
    cout << "Enter the second line: ";
    getline(cin, line2);
    cout << "You entered:\n" << line1 << "\n" << line2 << endl;
    return 0;
}
// How to handle C++ User Input

// Example 9: Input and Sum Two Integers
#include <iostream>
using namespace std;

int main() {
    int x, y;
    cout << "Enter two integers: ";
    cin >> x >> y;
    int sum = x + y;
    cout << "Sum: " << sum << endl;
    return 0;
}
// How to handle C++ User Input

// Example 10: Input and Multiply Two Floats
#include <iostream>
using namespace std;

int main() {
    float a, b;
    cout << "Enter two floats: ";
    cin >> a >> b;
    float product = a * b;
    cout << "Product: " << product << endl;
    return 0;
}
// How to handle C++ User Input

// Example 11: Input and Divide Two Doubles
#include <iostream>
using namespace std;

int main() {
    double dividend, divisor;
    cout << "Enter dividend and divisor: ";
    cin >> dividend >> divisor;
    double quotient = dividend / divisor;
    cout << "Quotient: " << quotient << endl;
    return 0;
}
// How to handle C++ User Input

// Example 12: Input Character and Check ASCII Value
#include <iostream>
using namespace std;

int main() {
    char character;
    cout << "Enter a character: ";
    cin >> character;
    cout << "ASCII value of " << character << " is " << int(character) << endl;
    return 0;
}
// How to handle C++ User Input

// Example 13: Input and Concatenate Two Strings
#include <iostream>
#include <string>
using namespace std;

int main() {
    string firstName, lastName;
    cout << "Enter your first name: ";
    cin >> firstName;
    cout << "Enter your last name: ";
    cin >> lastName;
    string fullName = firstName + " " + lastName;
    cout << "Full Name: " << fullName << endl;
    return 0;
}
// How to handle C++ User Input

// Example 14: Input and Calculate Area of Circle
#include <iostream>
using namespace std;

int main() {
    const double PI = 3.14159;
    double radius;
    cout << "Enter the radius of the circle: ";
    cin >> radius;
    double area = PI * radius * radius;
    cout << "Area of the circle: " << area << endl;
    return 0;
}
// How to handle C++ User Input

// Example 15: Input and Calculate Perimeter of Rectangle
#include <iostream>
using namespace std;

int main() {
    double length, width;
    cout << "Enter the length and width of the rectangle: ";
    cin >> length >> width;
    double perimeter = 2 * (length + width);
    cout << "Perimeter of the rectangle: " << perimeter << endl;
    return 0;
}
// How to handle C++ User Input

// Example 16: Input and Calculate Volume of a Box
#include <iostream>
using namespace std;

int main() {
    double length, width, height;
    cout << "Enter the length, width, and height of the box: ";
    cin >> length >> width >> height;
    double volume = length * width * height;
    cout << "Volume of the box: " << volume << endl;
    return 0;
}
// How to handle C++ User Input

// Example 17: Input and Check Even or Odd
#include <iostream>
using namespace std;

int main() {
    int number;
    cout << "Enter an integer: ";
    cin >> number;
    if (number % 2 == 0) {
        cout << number << " is even." << endl;
    } else {
        cout << number << " is odd." << endl;
    }
    return 0;
}
// How to handle C++ User Input

// Example 18: Input and Calculate Simple Interest
#include <iostream>
using namespace std;

int main() {
    double principal, rate, time;
    cout << "Enter principal amount, rate of interest, and time (in years): ";
    cin >> principal >> rate >> time;
    double simpleInterest = (principal * rate * time) / 100;
    cout << "Simple Interest: " << simpleInterest << endl;
    return 0;
}
// How to handle C++ User Input

// Example 19: Input and Calculate Average of Three Numbers
#include <iostream>
using namespace std;

int main() {
    double num1, num2, num3;
    cout << "Enter three numbers: ";
    cin >> num1 >> num2 >> num3;
    double average = (num1 + num2 + num3) / 3;
    cout << "Average: " << average << endl;
    return 0;
}
// How to handle C++ User Input

// Example 20: Input and Display User Information
#include <iostream>
#include <string>
using namespace std;

int main() {
    string name;
    int age;
    double salary;
    cout << "Enter your name: ";
    cin >> name;
    cout << "Enter your age: ";
    cin >> age;
    cout << "Enter your salary: ";
    cin >> salary;
    cout << "Name: " << name << ", Age: " << age << ", Salary: " << salary << endl;
    return 0;
}
// How to handle C++ User Input











C++ Data Type
/////////////////////////////////////////////////////////



// Example 1: Integer Data Type
#include <iostream>
using namespace std;

int main() {
    int age = 25; // Declaring an integer variable
    int year = 2024; // Declaring another integer variable
    int day = 16; // Declaring a third integer variable
    cout << "Age: " << age << ", Year: " << year << ", Day: " << day << endl;
    return 0;
}
// Demonstrates the use of integer data type in C++
//////////////////////////////////////////////////////////////////

// Example 2: Floating-Point Data Type
#include <iostream>
using namespace std;

int main() {
    float pi = 3.14f; // Declaring a float variable
    float radius = 5.0f; // Declaring another float variable
    float area = pi * radius * radius; // Calculating the area of a circle
    cout << "Pi: " << pi << ", Radius: " << radius << ", Area: " << area << endl;
    return 0;
}
// Demonstrates the use of float data type in C++
//////////////////////////////////////////////////////////////////

// Example 3: Double Data Type
#include <iostream>
using namespace std;

int main() {
    double x = 3.141592653589793; // Declaring a double variable
    double y = 2.718281828459045; // Declaring another double variable
    double z = x * y; // Calculating the product of x and y
    cout << "x: " << x << ", y: " << y << ", z: " << z << endl;
    return 0;
}
// Demonstrates the use of double data type in C++
//////////////////////////////////////////////////////////////////

// Example 4: Character Data Type
#include <iostream>
using namespace std;

int main() {
    char grade = 'A'; // Declaring a char variable
    char letter1 = 'B'; // Declaring another char variable
    char letter2 = 'C'; // Declaring a third char variable
    cout << "Grade: " << grade << ", Letter 1: " << letter1 << ", Letter 2: " << letter2 << endl;
    return 0;
}
// Demonstrates the use of char data type in C++
//////////////////////////////////////////////////////////////////

// Example 5: String Data Type
#include <iostream>
#include <string>
using namespace std;

int main() {
    string firstName = "John"; // Declaring a string variable
    string middleName = "Michael"; // Declaring another string variable
    string lastName = "Doe"; // Declaring a third string variable
    cout << "First Name: " << firstName << ", Middle Name: " << middleName << ", Last Name: " << lastName << endl;
    return 0;
}
// Demonstrates the use of string data type in C++
//////////////////////////////////////////////////////////////////

// Example 6: Boolean Data Type
#include <iostream>
using namespace std;

int main() {
    bool isProgrammingFun = true; // Declaring a boolean variable
    bool isMathHard = false; // Declaring another boolean variable
    bool isSkyBlue = true; // Declaring a third boolean variable
    cout << "Is programming fun? " << isProgrammingFun << ", Is math hard? " << isMathHard << ", Is sky blue? " << isSkyBlue << endl;
    return 0;
}
// Demonstrates the use of boolean data type in C++
//////////////////////////////////////////////////////////////////

// Example 7: Short Integer Data Type
#include <iostream>
using namespace std;

int main() {
    short num1 = 100; // Declaring a short variable
    short num2 = 200; // Declaring another short variable
    short num3 = 300; // Declaring a third short variable
    cout << "Num1: " << num1 << ", Num2: " << num2 << ", Num3: " << num3 << endl;
    return 0;
}
// Demonstrates the use of short data type in C++
//////////////////////////////////////////////////////////////////

// Example 8: Long Integer Data Type
#include <iostream>
using namespace std;

int main() {
    long num1 = 1000000; // Declaring a long variable
    long num2 = 2000000; // Declaring another long variable
    long num3 = 3000000; // Declaring a third long variable
    cout << "Num1: " << num1 << ", Num2: " << num2 << ", Num3: " << num3 << endl;
    return 0;
}
// Demonstrates the use of long data type in C++
//////////////////////////////////////////////////////////////////

// Example 9: Unsigned Integer Data Type
#include <iostream>
using namespace std;

int main() {
    unsigned int a = 100; // Declaring an unsigned int variable
    unsigned int b = 200; // Declaring another unsigned int variable
    unsigned int c = 300; // Declaring a third unsigned int variable
    cout << "a: " << a << ", b: " << b << ", c: " << c << endl;
    return 0;
}
// Demonstrates the use of unsigned int data type in C++
//////////////////////////////////////////////////////////////////

// Example 10: Unsigned Short Data Type
#include <iostream>
using namespace std;

int main() {
    unsigned short num1 = 500; // Declaring an unsigned short variable
    unsigned short num2 = 600; // Declaring another unsigned short variable
    unsigned short num3 = 700; // Declaring a third unsigned short variable
    cout << "Num1: " << num1 << ", Num2: " << num2 << ", Num3: " << num3 << endl;
    return 0;
}
// Demonstrates the use of unsigned short data type in C++
//////////////////////////////////////////////////////////////////

// Example 11: Unsigned Long Data Type
#include <iostream>
using namespace std;

int main() {
    unsigned long num1 = 100000; // Declaring an unsigned long variable
    unsigned long num2 = 200000; // Declaring another unsigned long variable
    unsigned long num3 = 300000; // Declaring a third unsigned long variable
    cout << "Num1: " << num1 << ", Num2: " << num2 << ", Num3: " << num3 << endl;
    return 0;
}
// Demonstrates the use of unsigned long data type in C++
//////////////////////////////////////////////////////////////////

// Example 12: Long Long Data Type
#include <iostream>
using namespace std;

int main() {
    long long num1 = 1000000000; // Declaring a long long variable
    long long num2 = 2000000000; // Declaring another long long variable
    long long num3 = 3000000000; // Declaring a third long long variable
    cout << "Num1: " << num1 << ", Num2: " << num2 << ", Num3: " << num3 << endl;
    return 0;
}
// Demonstrates the use of long long data type in C++
//////////////////////////////////////////////////////////////////

// Example 13: Unsigned Long Long Data Type
#include <iostream>
using namespace std;

int main() {
    unsigned long long num1 = 10000000000ULL; // Declaring an unsigned long long variable
    unsigned long long num2 = 20000000000ULL; // Declaring another unsigned long long variable
    unsigned long long num3 = 30000000000ULL; // Declaring a third unsigned long long variable
    cout << "Num1: " << num1 << ", Num2: " << num2 << ", Num3: " << num3 << endl;
    return 0;
}
// Demonstrates the use of unsigned long long data type in C++
//////////////////////////////////////////////////////////////////

// Example 14: Wide Character Data Type
#include <iostream>
using namespace std;

int main() {
    wchar_t letter1 = L'A'; // Declaring a wide char variable
    wchar_t letter2 = L'B'; // Declaring another wide char variable
    wchar_t letter3 = L'C'; // Declaring a third wide char variable
    wcout << L"Letter 1: " << letter1 << L", Letter 2: " << letter2 << L", Letter 3: " << letter3 << endl;
    return 0;
}
// Demonstrates the use of wide char data type in C++
//////////////////////////////////////////////////////////////////

// Example 15: Long Double Data Type
#include <iostream>
using namespace std;

int main() {
    long double num1 = 3.141592653589793238L; // Declaring a long double variable
    long double num2 = 2.718281828459045235L; // Declaring another long double variable
    long double num3 = num1 * num2; // Calculating the product of num1 and num2
    cout << "Num1: " << num1 << ", Num2: " << num2 << ", Num3: " << num3 << endl;
    return 0;
}
// Demonstrates the use of long double data type in C++
//////////////////////////////////////////////////////////////////

// Example 16: Void Data Type (Function Example)
#include <iostream>
using namespace std;

void displayMessage() {
    cout << "This is a void function." << endl;
}

int main() {
    displayMessage(); // Calling a void function
    return 0;
}
// Demonstrates the use of void data type in C++
//////////////////////////////////////////////////////////////////

// Example 17: Mixed Data Types
#include <iostream>
#include <string>
using namespace std;

int main() {
    int age = 30; // Integer variable
    double salary = 85000.50; // Double variable
    string name = "Jane Doe";


// Example 18: Mixed Data Types with Arithmetic
#include <iostream>
using namespace std;

int main() {
    int a = 10; // Integer variable
    float b = 5.5f; // Float variable
    double c = a + b; // Double variable resulting from adding an int and a float
    cout << "a: " << a << ", b: " << b << ", c: " << c << endl;
    return 0;
}
// Demonstrates the use of mixed data types with arithmetic in C++
//////////////////////////////////////////////////////////////////

// Example 19: Data Type Conversion
#include <iostream>
using namespace std;

int main() {
    int integer = 42; // Integer variable
    double convertedDouble = static_cast<double>(integer); // Converting int to double
    cout << "Integer: " << integer << ", Converted to double: " << convertedDouble << endl;
    return 0;
}
// Demonstrates data type conversion in C++
//////////////////////////////////////////////////////////////////

// Example 20: Using Enum Data Type
#include <iostream>
using namespace std;

enum Color { RED, GREEN, BLUE }; // Declaring an enum type

int main() {
    Color favoriteColor = BLUE; // Declaring an enum variable
    Color leastFavoriteColor = RED; // Declaring another enum variable
    Color neutralColor = GREEN; // Declaring a third enum variable
    cout << "Favorite color: " << favoriteColor << ", Least favorite color: " << leastFavoriteColor << ", Neutral color: " << neutralColor << endl;
    return 0;
}
// Demonstrates the use of enum data type in C++
//////////////////////////////////////////////////////////////////


// Example 18: Mixed Data Types with Arithmetic
#include <iostream>
using namespace std;

int main() {
    int a = 10; // Integer variable
    float b = 5.5f; // Float variable
    double c = a + b; // Double variable resulting from adding an int and a float
    cout << "a: " << a << ", b: " << b << ", c: " << c << endl;
    return 0;
}
// Demonstrates the use of mixed data types with arithmetic in C++
//////////////////////////////////////////////////////////////////

// Example 19: Data Type Conversion
#include <iostream>
using namespace std;

int main() {
    int integer = 42; // Integer variable
    double convertedDouble = static_cast<double>(integer); // Converting int to double
    cout << "Integer: " << integer << ", Converted to double: " << convertedDouble << endl;
    return 0;
}
// Demonstrates data type conversion in C++
//////////////////////////////////////////////////////////////////

// Example 20: Using Enum Data Type
#include <iostream>
using namespace std;

enum Color { RED, GREEN, BLUE }; // Declaring an enum type

int main() {
    Color favoriteColor = BLUE; // Declaring an enum variable
    Color leastFavoriteColor = RED; // Declaring another enum variable
    Color neutralColor = GREEN; // Declaring a third enum variable
    cout << "Favorite color: " << favoriteColor << ", Least favorite color: " << leastFavoriteColor << ", Neutral color: " << neutralColor << endl;
    return 0;
}
// Demonstrates the use of enum data type in C++
//////////////////////////////////////////////////////////////////









C++ Operators: syntax


///////////////////////////////////////////////////////////////


// Example 1: Assignment Operator
#include <iostream>
using namespace std;

int main() {
    int x = 10; // Assignment operator
    int y = 20;
    int z = x + y;
    cout << "x: " << x << ", y: " << y << ", z: " << z << endl;
    return 0;
}
// Demonstrates the use of assignment operator
//////////////////////////////////////////////////////////////////

// Example 2: Arithmetic Operators
#include <iostream>
using namespace std;

int main() {
    int a = 10;
    int b = 5;
    int sum = a + b; // Addition
    int diff = a - b; // Subtraction
    int prod = a * b; // Multiplication
    int quot = a / b; // Division
    int mod = a % b; // Modulus
    cout << "Sum: " << sum << ", Difference: " << diff << ", Product: " << prod << ", Quotient: " << quot << ", Modulus: " << mod << endl;
    return 0;
}
// Demonstrates the use of arithmetic operators
//////////////////////////////////////////////////////////////////

// Example 3: Increment and Decrement Operators
#include <iostream>
using namespace std;

int main() {
    int a = 10;
    a++; // Increment
    int b = 20;
    b--; // Decrement
    cout << "a: " << a << ", b: " << b << endl;
    return 0;
}
// Demonstrates the use of increment and decrement operators
//////////////////////////////////////////////////////////////////

// Example 4: Comparison Operators
#include <iostream>
using namespace std;

int main() {
    int x = 10;
    int y = 20;
    bool isEqual = (x == y); // Equal to
    bool isNotEqual = (x != y); // Not equal to
    bool isGreater = (x > y); // Greater than
    bool isLess = (x < y); // Less than
    bool isGreaterOrEqual = (x >= y); // Greater than or equal to
    bool isLessOrEqual = (x <= y); // Less than or equal to
    cout << "isEqual: " << isEqual << ", isNotEqual: " << isNotEqual << ", isGreater: " << isGreater << ", isLess: " << isLess << ", isGreaterOrEqual: " << isGreaterOrEqual << ", isLessOrEqual: " << isLessOrEqual << endl;
    return 0;
}
// Demonstrates the use of comparison operators
//////////////////////////////////////////////////////////////////

// Example 5: Logical Operators
#include <iostream>
using namespace std;

int main() {
    bool a = true;
    bool b = false;
    bool andResult = a && b; // Logical AND
    bool orResult = a || b; // Logical OR
    bool notResult = !a; // Logical NOT
    cout << "AND: " << andResult << ", OR: " << orResult << ", NOT: " << notResult << endl;
    return 0;
}
// Demonstrates the use of logical operators
//////////////////////////////////////////////////////////////////

// Example 6: Bitwise Operators
#include <iostream>
using namespace std;

int main() {
    int a = 5; // 0101 in binary
    int b = 3; // 0011 in binary
    int andResult = a & b; // Bitwise AND
    int orResult = a | b; // Bitwise OR
    int xorResult = a ^ b; // Bitwise XOR
    int notResult = ~a; // Bitwise NOT
    int leftShift = a << 1; // Left shift
    int rightShift = a >> 1; // Right shift
    cout << "AND: " << andResult << ", OR: " << orResult << ", XOR: " << xorResult << ", NOT: " << notResult << ", Left Shift: " << leftShift << ", Right Shift: " << rightShift << endl;
    return 0;
}
// Demonstrates the use of bitwise operators
//////////////////////////////////////////////////////////////////

// Example 7: Assignment with Arithmetic Operators
#include <iostream>
using namespace std;

int main() {
    int a = 10;
    a += 5; // Addition assignment
    a -= 3; // Subtraction assignment
    a *= 2; // Multiplication assignment
    a /= 4; // Division assignment
    a %= 3; // Modulus assignment
    cout << "Result: " << a << endl;
    return 0;
}
// Demonstrates the use of assignment with arithmetic operators
//////////////////////////////////////////////////////////////////

// Example 8: Conditional (Ternary) Operator
#include <iostream>
using namespace std;

int main() {
    int a = 10;
    int b = 20;
    int max = (a > b) ? a : b; // Conditional operator
    cout << "Max: " << max << endl;
    return 0;
}
// Demonstrates the use of conditional (ternary) operator
//////////////////////////////////////////////////////////////////

// Example 9: Sizeof Operator
#include <iostream>
using namespace std;

int main() {
    int a = 10;
    double b = 20.5;
    char c = 'A';
    cout << "Size of int: " << sizeof(a) << ", Size of double: " << sizeof(b) << ", Size of char: " << sizeof(c) << endl;
    return 0;
}
// Demonstrates the use of sizeof operator
//////////////////////////////////////////////////////////////////

// Example 10: Comma Operator
#include <iostream>
using namespace std;

int main() {
    int a, b;
    a = (b = 3, b + 2); // Comma operator
    cout << "a: " << a << ", b: " << b << endl;
    return 0;
}
// Demonstrates the use of comma operator
//////////////////////////////////////////////////////////////////

// Example 11: Pointer Operator
#include <iostream>
using namespace std;

int main() {
    int a = 10;
    int *p = &a; // Pointer operator
    cout << "Value of a: " << a << ", Address of a: " << &a << ", Value pointed by p: " << *p << endl;
    return 0;
}
// Demonstrates the use of pointer operator
//////////////////////////////////////////////////////////////////

// Example 12: Reference Operator
#include <iostream>
using namespace std;

int main() {
    int a = 10;
    int &ref = a; // Reference operator
    cout << "Value of a: " << a << ", Reference to a: " << ref << endl;
    return 0;
}
// Demonstrates the use of reference operator
//////////////////////////////////////////////////////////////////

// Example 13: Member Access Operator
#include <iostream>
using namespace std;

struct Point {
    int x;
    int y;
};

int main() {
    Point p;
    p.x = 10; // Member access operator
    p.y = 20;
    cout << "Point p: (" << p.x << ", " << p.y << ")" << endl;
    return 0;
}
// Demonstrates the use of member access operator
//////////////////////////////////////////////////////////////////

// Example 14: Member Access Through Pointer
#include <iostream>
using namespace std;

struct Point {
    int x;
    int y;
};

int main() {
    Point p = {10, 20};
    Point *ptr = &p;
    cout << "Point p: (" << ptr->x << ", " << ptr->y << ")" << endl;
    return 0;
}
// Demonstrates the use of member access through pointer
//////////////////////////////////////////////////////////////////

// Example 15: Scope Resolution Operator
#include <iostream>
using namespace std;

int a = 20; // Global variable

int main() {
    int a = 10; // Local variable
    cout << "Local a: " << a << ", Global a: " << ::a << endl;
    return 0;
}
// Demonstrates the use of scope resolution operator
//////////////////////////////////////////////////////////////////

// Example 16: New and Delete Operators
#include <iostream>
using namespace std;

int main() {
    int *p = new int; // New operator
    *p = 10;
    cout << "Value allocated in heap: " << *p << endl;
    delete p; // Delete operator
    return 0;
}
// Demonstrates the use of new and delete operators
//////////////////////////////////////////////////////////////////

// Example 17: Type Cast Operator
#include <iostream>
using namespace std;

int main() {
    double a = 10.5;
    int b = static_cast<int>(a); // Type cast operator
    cout << "Original: " << a << ", After casting: " << b << endl;
    return 0;
}
// Demonstrates the use of type cast operator
//////////////////////////////////////////////////////////////////

// Example 18: Logical NOT Operator
#include <iostream>
using namespace std;

int main() {
    bool a = true;
    bool b = !a; // Logical NOT operator
    cout << "a: " << a << ", b: " << b << endl;
    return 0;
}
// Demonstrates the use of logical NOT operator
//////////////////////////////////////////////////////////////////

// Example 19: Address-of Operator
#include <iostream>
using namespace std;

int main() {
    int a = 10;
    int *p = &a; // Address-of operator
    cout << "Address of a: " << p << endl;
    return 0;
}
// Demonstrates the use of address-of operator
//////////////////////////////////////////////////////////////////

// Example 20: Indirection Operator
#include <iostream>
using namespace std;

int main() {
    int a = 10;
    int *p = &a;
    int b = *p;


/////////////////////////////////////////////////////////////////////////
























c++ string 

////////////////////////////////////////////////////////////////

// Example 1: Declaring and Initializing a String
#include <iostream>
#include <string>
using namespace std;

int main() {
    string greeting = "Hello, World!"; // Declaring and initializing a string
    cout << greeting << endl;
    return 0;
}
// Demonstrates declaring and initializing a string in C++
//////////////////////////////////////////////////////////////////

// Example 2: Accessing Characters in a String
#include <iostream>
#include <string>
using namespace std;

int main() {
    string greeting = "Hello";
    cout << "First character: " << greeting[0] << endl; // Accessing the first character
    cout << "Third character: " << greeting[2] << endl; // Accessing the third character
    return 0;
}
// Demonstrates accessing characters in a string in C++
//////////////////////////////////////////////////////////////////

// Example 3: Modifying Characters in a String
#include <iostream>
#include <string>
using namespace std;

int main() {
    string greeting = "Hello";
    greeting[0] = 'J'; // Modifying the first character
    greeting[4] = 'y'; // Modifying the fifth character
    cout << "Modified string: " << greeting << endl;
    return 0;
}
// Demonstrates modifying characters in a string in C++
//////////////////////////////////////////////////////////////////

// Example 4: Finding the Length of a String
#include <iostream>
#include <string>
using namespace std;

int main() {
    string greeting = "Hello, World!";
    cout << "Length of the string: " << greeting.length() << endl; // Finding the length of the string
    return 0;
}
// Demonstrates finding the length of a string in C++
//////////////////////////////////////////////////////////////////

// Example 5: Concatenating Strings
#include <iostream>
#include <string>
using namespace std;

int main() {
    string firstName = "John";
    string lastName = "Doe";
    string fullName = firstName + " " + lastName; // Concatenating strings
    cout << "Full name: " << fullName << endl;
    return 0;
}
// Demonstrates concatenating strings in C++
//////////////////////////////////////////////////////////////////

// Example 6: Appending to a String
#include <iostream>
#include <string>
using namespace std;

int main() {
    string greeting = "Hello";
    greeting.append(", World!"); // Appending to a string
    cout << greeting << endl;
    return 0;
}
// Demonstrates appending to a string in C++
//////////////////////////////////////////////////////////////////

// Example 7: Substring Extraction
#include <iostream>
#include <string>
using namespace std;

int main() {
    string sentence = "Hello, World!";
    string word = sentence.substr(0, 5); // Extracting substring
    cout << "Extracted word: " << word << endl;
    return 0;
}
// Demonstrates extracting a substring from a string in C++
//////////////////////////////////////////////////////////////////

// Example 8: Inserting into a String
#include <iostream>
#include <string>
using namespace std;

int main() {
    string greeting = "Hello";
    greeting.insert(5, ", World"); // Inserting into a string
    cout << greeting << endl;
    return 0;
}
// Demonstrates inserting into a string in C++
//////////////////////////////////////////////////////////////////

// Example 9: Erasing from a String
#include <iostream>
#include <string>
using namespace std;

int main() {
    string sentence = "Hello, World!";
    sentence.erase(5, 7); // Erasing part of a string
    cout << "Modified sentence: " << sentence << endl;
    return 0;
}
// Demonstrates erasing part of a string in C++
//////////////////////////////////////////////////////////////////

// Example 10: Replacing Part of a String
#include <iostream>
#include <string>
using namespace std;

int main() {
    string sentence = "I love cats.";
    sentence.replace(7, 4, "dogs"); // Replacing part of a string
    cout << "Modified sentence: " << sentence << endl;
    return 0;
}
// Demonstrates replacing part of a string in C++
//////////////////////////////////////////////////////////////////







c++ consicionals : syntax
///////////////////////////////////////////////////////////////

// Example 1: Simple If Statement
#include <iostream>
using namespace std;

int main() {
    int x = 10;
    if (x > 5) {
        cout << "x is greater than 5" << endl;
    }
    return 0;
}
// Demonstrates a simple if statement in C++
//////////////////////////////////////////////////////////////////

// Example 2: If-Else Statement
#include <iostream>
using namespace std;

int main() {
    int x = 10;
    if (x > 5) {
        cout << "x is greater than 5" << endl;
    } else {
        cout << "x is not greater than 5" << endl;
    }
    return 0;
}
// Demonstrates an if-else statement in C++
//////////////////////////////////////////////////////////////////

// Example 3: If-Else If-Else Statement
#include <iostream>
using namespace std;

int main() {
    int x = 10;
    if (x > 10) {
        cout << "x is greater than 10" << endl;
    } else if (x == 10) {
        cout << "x is equal to 10" << endl;
    } else {
        cout << "x is less than 10" << endl;
    }
    return 0;
}
// Demonstrates an if-else if-else statement in C++
//////////////////////////////////////////////////////////////////

// Example 4: Nested If Statement
#include <iostream>
using namespace std;

int main() {
    int x = 10;
    if (x > 5) {
        if (x < 15) {
            cout << "x is between 5 and 15" << endl;
        }
    }
    return 0;
}
// Demonstrates a nested if statement in C++
//////////////////////////////////////////////////////////////////

// Example 5: Checking Multiple Conditions
#include <iostream>
using namespace std;

int main() {
    int x = 10;
    if (x > 5 && x < 15) {
        cout << "x is between 5 and 15" << endl;
    }
    return 0;
}
// Demonstrates checking multiple conditions in an if statement in C++
//////////////////////////////////////////////////////////////////

// Example 6: If-Else with Boolean Variable
#include <iostream>
using namespace std;

int main() {
    bool isSunny = true;
    if (isSunny) {
        cout << "It's sunny outside" << endl;
    } else {
        cout << "It's not sunny outside" << endl;
    }
    return 0;
}
// Demonstrates an if-else statement with a boolean variable in C++
//////////////////////////////////////////////////////////////////

// Example 7: If Statement with Character Comparison
#include <iostream>
using namespace std;

int main() {
    char grade = 'A';
    if (grade == 'A') {
        cout << "Excellent!" << endl;
    }
    return 0;
}
// Demonstrates an if statement with character comparison in C++
//////////////////////////////////////////////////////////////////

// Example 8: If-Else Statement with String Comparison
#include <iostream>
#include <string>
using namespace std;

int main() {
    string password = "secret";
    if (password == "secret") {
        cout << "Access granted" << endl;
    } else {
        cout << "Access denied" << endl;
    }
    return 0;
}
// Demonstrates an if-else statement with string comparison in C++
//////////////////////////////////////////////////////////////////

// Example 9: If-Else with Arithmetic Operations
#include <iostream>
using namespace std;

int main() {
    int a = 10;
    int b = 20;
    if (a + b > 25) {
        cout << "Sum is greater than 25" << endl;
    } else {
        cout << "Sum is not greater than 25" << endl;
    }
    return 0;
}
// Demonstrates an if-else statement with arithmetic operations in C++
//////////////////////////////////////////////////////////////////

// Example 10: If-Else If with Multiple Conditions
#include <iostream>
using namespace std;

int main() {
    int score = 85;
    if (score >= 90) {
        cout << "Grade: A" << endl;
    } else if (score >= 80) {
        cout << "Grade: B" << endl;
    } else if (score >= 70) {
        cout << "Grade: C" << endl;
    } else {
        cout << "Grade: D" << endl;
    }
    return 0;
}
// Demonstrates an if-else if statement with multiple conditions in C++
//////////////////////////////////////////////////////////////////

// Example 11: If-Else with Logical Operators
#include <iostream>
using namespace std;

int main() {
    int age = 20;
    if (age >= 18 && age <= 25) {
        cout << "You are a young adult" << endl;
    } else {
        cout << "You are not a young adult" << endl;
    }
    return 0;
}
// Demonstrates an if-else statement with logical operators in C++
//////////////////////////////////////////////////////////////////

// Example 12: If-Else with User Input
#include <iostream>
using namespace std;

int main() {
    int number;
    cout << "Enter a number: ";
    cin >> number;
    if (number % 2 == 0) {
        cout << "The number is even" << endl;
    } else {
        cout << "The number is odd" << endl;
    }
    return 0;
}
// Demonstrates an if-else statement with user input in C++
//////////////////////////////////////////////////////////////////

// Example 13: If-Else with Floating-Point Comparison
#include <iostream>
using namespace std;

int main() {
    float temperature = 36.5;
    if (temperature > 37.0) {
        cout << "You have a fever" << endl;
    } else {
        cout << "Your temperature is normal" << endl;
    }
    return 0;
}
// Demonstrates an if-else statement with floating-point comparison in C++
//////////////////////////////////////////////////////////////////

// Example 14: If-Else with Multiple Variables
#include <iostream>
using namespace std;

int main() {
    int a = 10;
    int b = 5;
    if (a > b) {
        cout << "a is greater than b" << endl;
    } else {
        cout << "a is not greater than b" << endl;
    }
    return 0;
}
// Demonstrates an if-else statement with multiple variables in C++
//////////////////////////////////////////////////////////////////

// Example 15: If-Else with Function Call
#include <iostream>
using namespace std;

bool isEven(int number) {
    return number % 2 == 0;
}

int main() {
    int number = 10;
    if (isEven(number)) {
        cout << "The number is even" << endl;
    } else {
        cout << "The number is odd" << endl;
    }
    return 0;
}
// Demonstrates an if-else statement with a function call in C++
//////////////////////////////////////////////////////////////////

// Example 16: If-Else with Nested Conditions
#include <iostream>
using namespace std;

int main() {
    int age = 16;
    if (age >= 13) {
        if (age <= 19) {
            cout << "You are a teenager" << endl;
        } else {
            cout << "You are not a teenager" << endl;
        }
    } else {
        cout << "You are not a teenager" << endl;
    }
    return 0;
}
// Demonstrates an if-else statement with nested conditions in C++
//////////////////////////////////////////////////////////////////

// Example 17: If-Else with Boolean Expression
#include <iostream>
using namespace std;

int main() {
    bool isWeekend = true;
    if (isWeekend) {
        cout << "It's weekend!" << endl;
    } else {
        cout << "It's a weekday" << endl;
    }
    return 0;
}
// Demonstrates an if-else statement with a boolean expression in C++
//////////////////////////////////////////////////////////////////

// Example 18: If-Else with Switch-Like Behavior
#include <iostream>
using namespace std;

int main() {
    int day = 3;
    if (day == 1) {
        cout << "Monday" << endl;
    } else if (day == 2) {
        cout << "Tuesday" << endl;
    } else if (day == 3) {
        cout << "Wednesday" << endl;
    } else if (day == 4) {
        cout << "Thursday" << endl;
    } else if (day == 5) {
        cout << "Friday" << endl;
    } else if (day == 6) {
        cout << "Saturday" << endl;
    } else if (day == 7) {
        cout << "Sunday" << endl;
    } else {
        cout << "Invalid day" << endl;
    }
    return 0;
}
// Demonstrates an if-else statement with switch-like behavior in C++
//////////////////////////////////////////////////////////////////

// Example 19: If-Else with Input Validation
#include <iostream>
using namespace std;

int main() {
    int age;
    cout << "Enter your age: ";
    cin >> age;
    if (age >= 0 && age <= 120) {
        cout << "Valid age" << endl;
    } else {
        cout << "Invalid age" << endl;
    }
    return 0;
}
// Demonstrates an if-else statement with input validation in C++
//////////////////////////////////////////////////////////////////

// Example 20: If-Else with String Length Comparison
#include <iostream>
#include <string>
using namespace std;

int main() {
    string password = "mypassword";
    if (password.length() >= 8) {
        cout << "Password is strong" <<


///////////////////////////////////////////////////////////////////////








c++ switch
//////////////////////////////////////////////////////////


// Example 1: Basic Switch Statement
#include <iostream>
using namespace std;

int main() {
    int day = 3;
    switch (day) {
        case 1:
            cout << "Monday" << endl;
            break;
        case 2:
            cout << "Tuesday" << endl;
            break;
        case 3:
            cout << "Wednesday" << endl;
            break;
        case 4:
            cout << "Thursday" << endl;
            break;
        case 5:
            cout << "Friday" << endl;
            break;
        case 6:
            cout << "Saturday" << endl;
            break;
        case 7:
            cout << "Sunday" << endl;
            break;
        default:
            cout << "Invalid day" << endl;
    }
    return 0;
}
// Demonstrates a basic switch statement in C++
//////////////////////////////////////////////////////////////////

// Example 2: Switch with Multiple Cases Having the Same Output
#include <iostream>
using namespace std;

int main() {
    int day = 6;
    switch (day) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            cout << "Weekday" << endl;
            break;
        case 6:
        case 7:
            cout << "Weekend" << endl;
            break;
        default:
            cout << "Invalid day" << endl;
    }
    return 0;
}
// Demonstrates switch with multiple cases having the same output in C++
//////////////////////////////////////////////////////////////////

// Example 3: Switch with Character
#include <iostream>
using namespace std;

int main() {
    char grade = 'B';
    switch (grade) {
        case 'A':
            cout << "Excellent" << endl;
            break;
        case 'B':
            cout << "Good" << endl;
            break;
        case 'C':
            cout << "Average" << endl;
            break;
        case 'D':
            cout << "Below Average" << endl;
            break;
        case 'F':
            cout << "Fail" << endl;
            break;
        default:
            cout << "Invalid grade" << endl;
    }
    return 0;
}
// Demonstrates switch with character in C++
//////////////////////////////////////////////////////////////////

// Example 4: Switch with String (Using std::string)
#include <iostream>
#include <string>
using namespace std;

int main() {
    string command = "start";
    if (command == "start") {
        cout << "Starting..." << endl;
    } else if (command == "stop") {
        cout << "Stopping..." << endl;
    } else if (command == "pause") {
        cout << "Pausing..." << endl;
    } else {
        cout << "Unknown command" << endl;
    }
    return 0;
}
// Demonstrates switch-like behavior with strings using if-else in C++
//////////////////////////////////////////////////////////////////

// Example 5: Switch with Nested Switch
#include <iostream>
using namespace std;

int main() {
    int menu = 1;
    int option = 2;
    switch (menu) {
        case 1:
            cout << "Main Menu" << endl;
            switch (option) {
                case 1:
                    cout << "Option 1 selected" << endl;
                    break;
                case 2:
                    cout << "Option 2 selected" << endl;
                    break;
                default:
                    cout << "Invalid option" << endl;
            }
            break;
        case 2:
            cout << "Settings" << endl;
            break;
        default:
            cout << "Invalid menu" << endl;
    }
    return 0;
}
// Demonstrates nested switch statements in C++
//////////////////////////////////////////////////////////////////

// Example 6: Switch Without Break
#include <iostream>
using namespace std;

int main() {
    int number = 2;
    switch (number) {
        case 1:
            cout << "One" << endl;
        case 2:
            cout << "Two" << endl;
        case 3:
            cout << "Three" << endl;
        default:
            cout << "Other number" << endl;
    }
    return 0;
}
// Demonstrates switch without break in C++
//////////////////////////////////////////////////////////////////

// Example 7: Switch with Default Case
#include <iostream>
using namespace std;

int main() {
    int number = 10;
    switch (number) {
        case 1:
            cout << "One" << endl;
            break;
        case 2:
            cout << "Two" << endl;
            break;
        default:
            cout << "Number is neither one nor two" << endl;
    }
    return 0;
}
// Demonstrates switch with default case in C++
//////////////////////////////////////////////////////////////////

// Example 8: Switch with Enum
#include <iostream>
using namespace std;

enum Color { RED, GREEN, BLUE };

int main() {
    Color color = GREEN;
    switch (color) {
        case RED:
            cout << "Red color" << endl;
            break;
        case GREEN:
            cout << "Green color" << endl;
            break;
        case BLUE:
            cout << "Blue color" << endl;
            break;
        default:
            cout << "Unknown color" << endl;
    }
    return 0;
}
// Demonstrates switch with enum in C++
//////////////////////////////////////////////////////////////////

// Example 9: Switch with Mathematical Expression
#include <iostream>
using namespace std;

int main() {
    int a = 5, b = 3;
    int result = a + b;
    switch (result) {
        case 8:
            cout << "Result is 8" << endl;
            break;
        case 7:
            cout << "Result is 7" << endl;
            break;
        default:
            cout << "Result is neither 7 nor 8" << endl;
    }
    return 0;
}
// Demonstrates switch with mathematical expression in C++
//////////////////////////////////////////////////////////////////

// Example 10: Switch with Boolean Expressions
#include <iostream>
using namespace std;

int main() {
    int a = 10, b = 5;
    switch (a > b) {
        case true:
            cout << "a is greater than b" << endl;
            break;
        case false:
            cout << "a is not greater than b" << endl;
            break;
    }
    return 0;
}
// Demonstrates switch with boolean expressions in C++
//////////////////////////////////////////////////////////////////













C++ loops
////////////////////////////////////////////////////////////////

// Example 1: Basic For Loop
#include <iostream>
using namespace std;

int main() {
    for (int i = 0; i < 5; ++i) {
        cout << "i: " << i << endl;
    }
    return 0;
}
// Demonstrates a basic for loop in C++
//////////////////////////////////////////////////////////////////

// Example 2: Basic While Loop
#include <iostream>
using namespace std;

int main() {
    int i = 0;
    while (i < 5) {
        cout << "i: " << i << endl;
        ++i;
    }
    return 0;
}
// Demonstrates a basic while loop in C++
//////////////////////////////////////////////////////////////////

// Example 3: Basic Do-While Loop
#include <iostream>
using namespace std;

int main() {
    int i = 0;
    do {
        cout << "i: " << i << endl;
        ++i;
    } while (i < 5);
    return 0;
}
// Demonstrates a basic do-while loop in C++
//////////////////////////////////////////////////////////////////

// Example 4: For Loop with Break
#include <iostream>
using namespace std;

int main() {
    for (int i = 0; i < 10; ++i) {
        if (i == 5) {
            break; // Exit the loop when i is 5
        }
        cout << "i: " << i << endl;
    }
    return 0;
}
// Demonstrates a for loop with break in C++
//////////////////////////////////////////////////////////////////

// Example 5: For Loop with Continue
#include <iostream>
using namespace std;

int main() {
    for (int i = 0; i < 10; ++i) {
        if (i == 5) {
            continue; // Skip the rest of the loop when i is 5
        }
        cout << "i: " << i << endl;
    }
    return 0;
}
// Demonstrates a for loop with continue in C++
//////////////////////////////////////////////////////////////////

// Example 6: Nested For Loop
#include <iostream>
using namespace std;

int main() {
    for (int i = 1; i <= 3; ++i) {
        for (int j = 1; j <= 3; ++j) {
            cout << "i: " << i << ", j: " << j << endl;
        }
    }
    return 0;
}
// Demonstrates a nested for loop in C++
//////////////////////////////////////////////////////////////////

// Example 7: While Loop with User Input
#include <iostream>
using namespace std;

int main() {
    int number;
    cout << "Enter a number (negative to stop): ";
    cin >> number;
    while (number >= 0) {
        cout << "You entered: " << number << endl;
        cout << "Enter a number (negative to stop): ";
        cin >> number;
    }
    return 0;
}
// Demonstrates a while loop with user input in C++
//////////////////////////////////////////////////////////////////

// Example 8: Do-While Loop with User Input
#include <iostream>
using namespace std;

int main() {
    int number;
    do {
        cout << "Enter a number (negative to stop): ";
        cin >> number;
        if (number >= 0) {
            cout << "You entered: " << number << endl;
        }
    } while (number >= 0);
    return 0;
}
// Demonstrates a do-while loop with user input in C++
//////////////////////////////////////////////////////////////////

// Example 9: For Loop with Array
#include <iostream>
using namespace std;

int main() {
    int arr[5] = {1, 2, 3, 4, 5};
    for (int i = 0; i < 5; ++i) {
        cout << "arr[" << i << "]: " << arr[i] << endl;
    }
    return 0;
}
// Demonstrates a for loop with an array in C++
//////////////////////////////////////////////////////////////////

// Example 10: Range-Based For Loop
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> vec = {1, 2, 3, 4, 5};
    for (int x : vec) {
        cout << x << endl;
    }
    return 0;
}
// Demonstrates a range-based for loop in C++
//////////////////////////////////////////////////////////////////

// Example 11: For Loop with Increment By 2
#include <iostream>
using namespace std;

int main() {
    for (int i = 0; i < 10; i += 2) {
        cout << "i: " << i << endl;
    }
    return 0;
}
// Demonstrates a for loop with increment by 2 in C++
//////////////////////////////////////////////////////////////////

// Example 12: While Loop with Decrement
#include <iostream>
using namespace std;

int main() {
    int i = 10;
    while (i > 0) {
        cout << "i: " << i << endl;
        --i;
    }
    return 0;
}
// Demonstrates a while loop with decrement in C++
//////////////////////////////////////////////////////////////////

// Example 13: Infinite Loop with Break
#include <iostream>
using namespace std;

int main() {
    int i = 0;
    while (true) {
        cout << "i: " << i << endl;
        if (i >= 5) {
            break;
        }
        ++i;
    }
    return 0;
}
// Demonstrates an infinite loop with break in C++
//////////////////////////////////////////////////////////////////

// Example 14: For Loop with Conditional Continue
#include <iostream>
using namespace std;

int main() {
    for (int i = 0; i < 10; ++i) {
        if (i % 2 == 0) {
            continue; // Skip even numbers
        }
        cout << "i: " << i << endl;
    }
    return 0;
}
// Demonstrates a for loop with conditional continue in C++
//////////////////////////////////////////////////////////////////

// Example 15: For Loop with Multiple Variables
#include <iostream>
using namespace std;

int main() {
    for (int i = 0, j = 5; i < 5; ++i, --j) {
        cout << "i: " << i << ", j: " << j << endl;
    }
    return 0;
}
// Demonstrates a for loop with multiple variables in C++
//////////////////////////////////////////////////////////////////

// Example 16: Nested While Loop
#include <iostream>
using namespace std;

int main() {
    int i = 1;
    while (i <= 3) {
        int j = 1;
        while (j <= 3) {
            cout << "i: " << i << ", j: " << j << endl;
            ++j;
        }
        ++i;
    }
    return 0;
}
// Demonstrates a nested while loop in C++
//////////////////////////////////////////////////////////////////

// Example 17: For Loop with Vector
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> vec = {1, 2, 3, 4, 5};
    for (int i = 0; i < vec.size(); ++i) {
        cout << "vec[" << i << "]: " << vec[i] << endl;
    }
    return 0;
}
// Demonstrates a for loop with a vector in C++
//////////////////////////////////////////////////////////////////

// Example 18: While Loop with Conditional Break
#include <iostream>
using namespace std;

int main() {
    int i = 0;
    while (i < 10) {
        if (i == 5) {
            break; // Exit the loop when i is 5
        }
        cout << "i: " << i << endl;
        ++i;
    }
    return 0;
}
// Demonstrates a while loop with conditional break in C++
//////////////////////////////////////////////////////////////////

// Example 19: For Loop with User Input
#include <iostream>
using namespace std;

int main() {
    int n;
    cout << "Enter the number of iterations: ";
    cin >> n;
    for (int i = 0; i < n; ++i) {
        cout << "Iteration: " << i << endl;
    }
    return 0;
}
// Demonstrates a for loop with user input in C++
//////////////////////////////////////////////////////////////////

// Example 20: Do-While Loop with Condition at the End
#include <iostream>
using namespace std;

int main() {
    int i = 10;
    do {
        cout << "i: " << i << endl;
        --i;
    } while (i > 0);
    return 0;
}
// Demonstrates a do-while loop with the condition at the end in C++
//////////////////////////////////////////////////////////////////

























c++ arrays
/////////////////////////////////////////////////////////////////////

// Example 1: Declaring and Initializing an Array
#include <iostream>
using namespace std;

int main() {
    int arr[5] = {1, 2, 3, 4, 5}; // Declaring and initializing an array
    for (int i = 0; i < 5; ++i) {
        cout << "arr[" << i << "]: " << arr[i] << endl;
    }
    return 0;
}
// Demonstrates declaring and initializing an array in C++
//////////////////////////////////////////////////////////////////

// Example 2: Accessing Array Elements
#include <iostream>
using namespace std;

int main() {
    int arr[5] = {10, 20, 30, 40, 50};
    cout << "First element: " << arr[0] << endl; // Accessing the first element
    cout << "Third element: " << arr[2] << endl; // Accessing the third element
    return 0;
}
// Demonstrates accessing array elements in C++
//////////////////////////////////////////////////////////////////

// Example 3: Modifying Array Elements
#include <iostream>
using namespace std;

int main() {
    int arr[5] = {1, 2, 3, 4, 5};
    arr[0] = 10; // Modifying the first element
    arr[4] = 50; // Modifying the fifth element
    for (int i = 0; i < 5; ++i) {
        cout << "arr[" << i << "]: " << arr[i] << endl;
    }
    return 0;
}
// Demonstrates modifying array elements in C++
//////////////////////////////////////////////////////////////////

// Example 4: Array with Loop
#include <iostream>
using namespace std;

int main() {
    int arr[5] = {5, 10, 15, 20, 25};
    for (int i = 0; i < 5; ++i) {
        cout << "arr[" << i << "]: " << arr[i] << endl;
    }
    return 0;
}
// Demonstrates using an array with a loop in C++
//////////////////////////////////////////////////////////////////

// Example 5: Sum of Array Elements
#include <iostream>
using namespace std;

int main() {
    int arr[5] = {2, 4, 6, 8, 10};
    int sum = 0;
    for (int i = 0; i < 5; ++i) {
        sum += arr[i];
    }
    cout << "Sum of array elements: " << sum << endl;
    return 0;
}
// Demonstrates calculating the sum of array elements in C++
//////////////////////////////////////////////////////////////////

// Example 6: Finding the Maximum Element in an Array
#include <iostream>
using namespace std;

int main() {
    int arr[5] = {3, 7, 2, 8, 5};
    int max = arr[0];
    for (int i = 1; i < 5; ++i) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    cout << "Maximum element: " << max << endl;
    return 0;
}
// Demonstrates finding the maximum element in an array in C++
//////////////////////////////////////////////////////////////////

// Example 7: Reversing an Array
#include <iostream>
using namespace std;

int main() {
    int arr[5] = {1, 2, 3, 4, 5};
    int n = 5;
    for (int i = 0; i < n / 2; ++i) {
        int temp = arr[i];
        arr[i] = arr[n - i - 1];
        arr[n - i - 1] = temp;
    }
    cout << "Reversed array: ";
    for (int i = 0; i < n; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
    return 0;
}
// Demonstrates reversing an array in C++
//////////////////////////////////////////////////////////////////

// Example 8: Multidimensional Array
#include <iostream>
using namespace std;

int main() {
    int arr[2][3] = {{1, 2, 3}, {4, 5, 6}};
    for (int i = 0; i < 2; ++i) {
        for (int j = 0; j < 3; ++j) {
            cout << "arr[" << i << "][" << j << "]: " << arr[i][j] << endl;
        }
    }
    return 0;
}
// Demonstrates using a multidimensional array in C++
//////////////////////////////////////////////////////////////////

// Example 9: Passing Array to Function
#include <iostream>
using namespace std;

void printArray(int arr[], int size) {
    for (int i = 0; i < size; ++i) {
        cout << "arr[" << i << "]: " << arr[i] << endl;
    }
}

int main() {
    int arr[5] = {1, 3, 5, 7, 9};
    printArray(arr, 5);
    return 0;
}
// Demonstrates passing an array to a function in C++
//////////////////////////////////////////////////////////////////

// Example 10: Array of Strings
#include <iostream>
#include <string>
using namespace std;

int main() {
    string arr[3] = {"Hello", "World", "C++"};
    for (int i = 0; i < 3; ++i) {
        cout << "arr[" << i << "]: " << arr[i] << endl;
    }
    return 0;
}
// Demonstrates an array of strings in C++
//////////////////////////////////////////////////////////////////






















c++ objects and clases
////////////////////////////////////////////////////////////////////////////////////////


// Example 1: Basic Class and Object
#include <iostream>
using namespace std;

class Person {
public:
    string name;
    int age;

    void display() {
        cout << "Name: " << name << ", Age: " << age << endl;
    }
};

int main() {
    Person p1;
    p1.name = "John";
    p1.age = 30;
    p1.display();
    return 0;
}
// Demonstrates a basic class and object in C++
//////////////////////////////////////////////////////////////////

// Example 2: Class with Constructor
#include <iostream>
using namespace std;

class Person {
public:
    string name;
    int age;

    Person(string n, int a) {
        name = n;
        age = a;
    }

    void display() {
        cout << "Name: " << name << ", Age: " << age << endl;
    }
};

int main() {
    Person p1("John", 30);
    p1.display();
    return 0;
}
// Demonstrates a class with a constructor in C++
//////////////////////////////////////////////////////////////////

// Example 3: Class with Destructor
#include <iostream>
using namespace std;

class Person {
public:
    string name;
    int age;

    Person(string n, int a) {
        name = n;
        age = a;
    }

    ~Person() {
        cout << "Destructor called for " << name << endl;
    }

    void display() {
        cout << "Name: " << name << ", Age: " << age << endl;
    }
};

int main() {
    Person p1("John", 30);
    p1.display();
    return 0;
}
// Demonstrates a class with a destructor in C++
//////////////////////////////////////////////////////////////////

// Example 4: Private Members in Class
#include <iostream>
using namespace std;

class Person {
private:
    string name;
    int age;

public:
    void setName(string n) {
        name = n;
    }

    void setAge(int a) {
        age = a;
    }

    void display() {
        cout << "Name: " << name << ", Age: " << age << endl;
    }
};

int main() {
    Person p1;
    p1.setName("John");
    p1.setAge(30);
    p1.display();
    return 0;
}
// Demonstrates private members in a class in C++
//////////////////////////////////////////////////////////////////

// Example 5: Class with Member Functions
#include <iostream>
using namespace std;

class Rectangle {
public:
    int length;
    int width;

    void setDimensions(int l, int w) {
        length = l;
        width = w;
    }

    int getArea() {
        return length * width;
    }
};

int main() {
    Rectangle rect;
    rect.setDimensions(10, 5);
    cout << "Area: " << rect.getArea() << endl;
    return 0;
}
// Demonstrates a class with member functions in C++
//////////////////////////////////////////////////////////////////

// Example 6: Class with Multiple Constructors
#include <iostream>
using namespace std;

class Rectangle {
public:
    int length;
    int width;

    Rectangle() {
        length = 0;
        width = 0;
    }

    Rectangle(int l, int w) {
        length = l;
        width = w;
    }

    int getArea() {
        return length * width;
    }
};

int main() {
    Rectangle rect1;
    Rectangle rect2(10, 5);
    cout << "Area of rect1: " << rect1.getArea() << endl;
    cout << "Area of rect2: " << rect2.getArea() << endl;
    return 0;
}
// Demonstrates a class with multiple constructors in C++
//////////////////////////////////////////////////////////////////

// Example 7: Static Member in Class
#include <iostream>
using namespace std;

class MyClass {
public:
    static int count;

    MyClass() {
        count++;
    }

    static void displayCount() {
        cout << "Count: " << count << endl;
    }
};

int MyClass::count = 0;

int main() {
    MyClass obj1;
    MyClass obj2;
    MyClass::displayCount();
    return 0;
}
// Demonstrates a static member in a class in C++
//////////////////////////////////////////////////////////////////

// Example 8: Friend Function
#include <iostream>
using namespace std;

class Box {
private:
    int width;

public:
    Box() {
        width = 0;
    }

    friend void printWidth(Box box);
};

void printWidth(Box box) {
    cout << "Width: " << box.width << endl;
}

int main() {
    Box box;
    printWidth(box);
    return 0;
}
// Demonstrates a friend function in C++
//////////////////////////////////////////////////////////////////

// Example 9: Inheritance
#include <iostream>
using namespace std;

class Animal {
public:
    void eat() {
        cout << "Eating..." << endl;
    }
};

class Dog : public Animal {
public:
    void bark() {
        cout << "Barking..." << endl;
    }
};

int main() {
    Dog dog;
    dog.eat();
    dog.bark();
    return 0;
}
// Demonstrates inheritance in C++
//////////////////////////////////////////////////////////////////

// Example 10: Overriding
#include <iostream>
using namespace std;

class Base {
public:
    void show() {
        cout << "Base class show function" << endl;
    }
};

class Derived : public Base {
public:
    void show() {
        cout << "Derived class show function" << endl;
    }
};

int main() {
    Derived d;
    d.show();
    return 0;
}
// Demonstrates overriding in C++
//////////////////////////////////////////////////////////////////

// Example 11: Polymorphism
#include <iostream>
using namespace std;

class Base {
public:
    virtual void show() {
        cout << "Base class show function" << endl;
    }
};

class Derived : public Base {
public:
    void show() {
        cout << "Derived class show function" << endl;
    }
};

int main() {
    Base* b;
    Derived d;
    b = &d;
    b->show();
    return 0;
}
// Demonstrates polymorphism in C++
//////////////////////////////////////////////////////////////////

// Example 12: Abstract Class
#include <iostream>
using namespace std;

class Shape {
public:
    virtual void draw() = 0; // Pure virtual function
};

class Circle : public Shape {
public:
    void draw() {
        cout << "Drawing Circle" << endl;
    }
};

int main() {
    Circle c;
    c.draw();
    return 0;
}
// Demonstrates an abstract class in C++
//////////////////////////////////////////////////////////////////

// Example 13: Multiple Inheritance
#include <iostream>
using namespace std;

class Base1 {
public:
    void show() {
        cout << "Base1 class show function" << endl;
    }
};

class Base2 {
public:
    void display() {
        cout << "Base2 class display function" << endl;
    }
};

class Derived : public Base1, public Base2 {};

int main() {
    Derived d;
    d.show();
    d.display();
    return 0;
}
// Demonstrates multiple inheritance in C++
//////////////////////////////////////////////////////////////////

// Example 14: Constructor Initialization List
#include <iostream>
using namespace std;

class MyClass {
private:
    int x;
    int y;

public:
    MyClass(int a, int b) : x(a), y(b) {}

    void display() {
        cout << "x: " << x << ", y: " << y << endl;
    }
};

int main() {
    MyClass obj(10, 20);
    obj.display();
    return 0;
}
// Demonstrates a constructor initialization list in C++
//////////////////////////////////////////////////////////////////

// Example 15: Copy Constructor
#include <iostream>
using namespace std;

class MyClass {
public:
    int x;

    MyClass(int a) : x(a) {}

    MyClass(const MyClass &obj) {
        x = obj.x;
    }

    void display() {
        cout << "x: " << x << endl;
    }
};

int main() {
    MyClass obj1(10);
    MyClass obj2 = obj1;
    obj2.display();
    return 0;
}
// Demonstrates a copy constructor in C++
//////////////////////////////////////////////////////////////////

// Example 16: Operator Overloading
#include <iostream>
using namespace std;

class Complex {
public:
    int real;
    int imag;

    Complex() : real(0), imag(0) {}

    Complex operator + (const Complex &obj) {
        Complex temp;
        temp.real = real + obj.real;
        temp.imag = imag + obj.imag;
        return temp;
    }

    void display() {
        cout << real << " + " << imag << "i" << endl;
    }
};

int main() {
    Complex c1, c2, c3;
    c1.real = 3;
    c1.imag = 2;
    c2.real = 1;
    c2.imag = 7;
    c3 = c1 + c2;
    c3.display();
    return 0;
}
// Demonstrates operator overloading in C++
//////////////////////////////////////////////////////////////////

// Example 17: Template Class
#include <iostream>
using namespace std;

template <class T>
class MyClass {
public:
    T data;

    MyClass(T a) {
        data = a;
    }

    void display() {
        cout << "Data: " << data << endl;
    }
};

int main() {
    MyClass<int> obj1(5);
    obj1.display();

    MyClass<string> obj2("Hello");
    obj2.display();
    return 0;
}
// Demonstrates a template class in C++
//////////////////////////////////////////////////////////////////

// Example 18: Encapsulation


